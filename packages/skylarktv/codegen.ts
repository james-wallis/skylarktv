import type { CodegenConfig } from "@graphql-codegen/cli";
import { SAAS_API_ENDPOINT, SAAS_API_KEY } from "./src/constants/env";
import { CLIENT_APP_CONFIG } from "./src/constants/app";

const onlyGenerateCssFile = process.env.ONLY_GENERATE_CSS_FILE === "true";

if (onlyGenerateCssFile) {
  // eslint-disable-next-line no-console
  console.log("[Codegen] Only generating globals.css");
} else {
  // eslint-disable-next-line no-console
  console.log(`[Codegen] URL: ${SAAS_API_ENDPOINT}`);
}

const { primary, accent, header } = CLIENT_APP_CONFIG.colours;

const gqlFile = "./src/types/gql.ts";
const globalCSSFile = "./src/styles/globals.css";
const siteWebmanifestFile = "./public/site.webmanifest";

const schema: CodegenConfig["schema"] = {
  [SAAS_API_ENDPOINT]: {
    headers: {
      "x-api-key": SAAS_API_KEY,
      Authorization: SAAS_API_KEY,
    },
  },
};

const gqlGenerator: CodegenConfig["generates"][0] = {
  plugins: [
    "typescript",
    {
      add: {
        content:
          "/* auto-generated by graphql-codegen */\n/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */",
      },
    },
    {
      add: {
        content: "/* eslint-enable */",
        placement: "append",
      },
    },
  ],
  schema,
};

const cssGenerator: CodegenConfig["generates"][0] = {
  plugins: [
    {
      add: {
        content:
          "/* auto-generated by graphql-codegen */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",
      },
    },
    {
      add: {
        content: `:root {
--skylarktv-primary-color: ${primary.startsWith("#") ? primary : `#${primary}`};
--skylarktv-accent-color: ${accent.startsWith("#") ? accent : `#${accent}`};
--skylarktv-header-color: ${(header || primary).startsWith("#") ? header || primary : `#${header || primary}`};
}

/* Cheat to change prose bullet point color */
.prose
  :where(ul > li):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  )::marker {
  color: var(--skylarktv-primary-color);
}`,
      },
    },
  ],
  schema: onlyGenerateCssFile ? "https://graphqlzero.almansi.me/api" : schema,
};

const siteWebmanifestGenerator: CodegenConfig["generates"][0] = {
  plugins: [
    {
      add: {
        content: JSON.stringify(
          {
            name: CLIENT_APP_CONFIG.name,
            short_name: CLIENT_APP_CONFIG.name,
            icons: [
              {
                src: CLIENT_APP_CONFIG.favicon || "/android-chrome-192x192.png",
                sizes: "192x192",
                type: "image/png",
              },
              {
                src: CLIENT_APP_CONFIG.favicon || "/android-chrome-512x512.png",
                sizes: "512x512",
                type: "image/png",
              },
            ],
            theme_color: "#1B1A20",
            background_color: "#1B1A20",
            display: "standalone",
          },
          null,
          2,
        ),
      },
    },
  ],
  schema: onlyGenerateCssFile ? "https://graphqlzero.almansi.me/api" : schema,
};

const defaultGenerates: CodegenConfig["generates"] = {
  [globalCSSFile]: cssGenerator,
  [siteWebmanifestFile]: siteWebmanifestGenerator,
};

const generates: CodegenConfig["generates"] = onlyGenerateCssFile
  ? defaultGenerates
  : { ...defaultGenerates, [gqlFile]: gqlGenerator };

const config: CodegenConfig = {
  overwrite: true,
  generates,
  hooks: { afterAllFileWrite: ["prettier --write"] },
};

export default config;
